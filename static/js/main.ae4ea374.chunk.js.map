{"version":3,"sources":["serviceWorker.js","data/colors.js","components/GraphView.js","components/NodeInformation.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","categoricalColors","d3","colors","memo","setNode","svgref","useRef","networkLinkStatus","networkNodes","colaborationNetwork","nodes","networkLinks","publications","reduce","result","publication","authors","length","flatMap","authorA","idx","slice","map","authorB","linkId","forEach","id","link","find","push","split","source","target","isConnected","nodeA","nodeB","useEffect","svg","current","width","clientWidth","height","clientHeight","simulation","force","d","strength","degree","append","attr","selectAll","data","join","node","Math","sqrt","field","call","on","event","dNode","active","alphaTarget","restart","fx","x","fy","y","drag","_event","transition","duration","style","o","l","_dNode","className","ref","NodeInformation","App","useState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBAC,EAAoBC,IAAgBA,KAc3BC,EAZA,CACb,wBAAyBF,EAAkB,GAC3C,mBAAcA,EAAkB,GAChC,qCAAsCA,EAAkB,GACxD,yBAA0BA,EAAkB,GAC5C,8BAAsBA,EAAkB,GACxC,6BAA2BA,EAAkB,GAC7C,+BAA6BA,EAAkB,GAC/C,sCAAuCA,EAAkB,GACzD,6BAA2BA,EAAkB,IC4JhCG,kBAnKG,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACbC,EAASC,iBAAO,MAKlBC,EAAoB,GAElBC,EAAeC,EAAoBC,MAEnCC,EAAeF,EAAoBG,aAAaC,QACpD,SAACC,EAAQC,GACP,OAAKA,EAAYC,QAAQC,OAAS,GAEjBF,EAAYC,QAAQE,SAAQ,SAACC,EAASC,GAAV,OAC3CL,EAAYC,QAAQK,MAAMD,EAAM,GAAGE,KAAI,SAACC,GACtC,IAAIC,EAAM,UAAML,EAAN,YAAiBI,GAE3B,OADAhB,EAAkBiB,GAAU,EACrBA,QAIFC,SAAQ,SAACC,GAChB,IAAMC,EAAOb,EAAOc,MAAK,SAACD,GAAD,OAAUA,EAAKD,KAAOA,KAC/C,GAAIC,EACFA,EAAKf,aAAaiB,KAAKd,EAAYW,QAC9B,CAAC,IAAD,EACoBA,EAAGI,MAAM,KAD7B,mBACEC,EADF,KACUC,EADV,KAELlB,EAAOe,KAAK,CAAEH,KAAIK,SAAQC,SAAQpB,aAAc,CAACG,EAAYW,UAhBrBZ,IAqB9C,IAGImB,EAAc,SAACC,EAAOC,GAC1B,OACE5B,EAAkB,GAAD,OAAI2B,EAAMR,GAAV,YAAgBS,EAAMT,MACvCnB,EAAkB,GAAD,OAAI4B,EAAMT,GAAV,YAAgBQ,EAAMR,MACvCQ,EAAMR,KAAOS,EAAMT,IAoHvB,OAvFAU,qBAAU,WACR,IAAMC,EAAMpC,IAAUI,EAAOiC,SAEvBC,EAAQlC,EAAOiC,QAAQE,YACvBC,EAASpC,EAAOiC,QAAQI,aAExBC,EAAa1C,IACAO,GAChBoC,MACC,OACA3C,IACaU,GACVe,IAAG,SAACmB,GAAD,OAAOA,EAAEnB,MACZoB,SA9EY,MAgFhBF,MAAM,SAAU3C,MAAmB6C,UAjFnB,MAkFhBF,MAAM,SAAU3C,IAAesC,EAAQ,EAAGE,EAAS,IACnDG,MAAM,IAAK3C,OACX2C,MAAM,IAAK3C,OAEdU,EAAac,SAAQ,SAACE,GACfA,EAAKI,OAAOgB,SAAQpB,EAAKI,OAAOgB,OAAS,GACzCpB,EAAKK,OAAOe,SAAQpB,EAAKK,OAAOe,OAAS,GAE9CpB,EAAKI,OAAOgB,SACZpB,EAAKK,OAAOe,YAGd,IAAMpB,EAAOU,EACVW,OAAO,KACPC,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBC,UAAU,QACVC,KAAKxC,GACLyC,KAAK,QACLH,KAAK,eAAgB,KAElBI,EAAOhB,EACVW,OAAO,KACPC,KAAK,SAAU,QACfA,KAAK,eAAgB,KACrBC,UAAU,UACVC,KAAK3C,GACL4C,KAAK,UACLH,KAAK,KAAK,SAACJ,GAAD,OAAQA,EAAEE,OAAS,EAAIO,KAAKC,KAAKV,EAAEE,QAAU,KACvDE,KAAK,QAAQ,SAACJ,GAAD,OAAO3C,EAAO2C,EAAEW,UAC7BC,KAvEQ,SAACd,GAkBZ,OAAO1C,MAEJyD,GAAG,SAnBc,SAACC,EAAOC,GACrBD,EAAME,QAAQlB,EAAWmB,YAAY,IAAKC,UAC/CH,EAAMI,GAAKJ,EAAMK,EACjBL,EAAMM,GAAKN,EAAMO,KAiBhBT,GAAG,QAdU,SAACC,EAAOC,GACtBA,EAAMI,GAAKL,EAAMM,EACjBL,EAAMM,GAAKP,EAAMQ,KAahBT,GAAG,OAVY,SAACC,EAAOC,GACnBD,EAAME,QAAQlB,EAAWmB,YAAY,GAC1CF,EAAMI,GAAK,KACXJ,EAAMM,GAAK,QAwDLE,CAAKzB,IAEbU,EAAKK,GAAG,aAAa,SAACW,EAAQT,GAC5B,IAAMU,EAAarE,MAAgBsE,SAAS,KAE5ClB,EACGiB,WAAWA,GACXE,MAAM,kBAAkB,SAACC,GAAD,OAAQxC,EAAY2B,EAAOa,GAAK,EAAI,MAC5DD,MAAM,WAAW,SAACC,GAAD,OAAQxC,EAAY2B,EAAOa,GAAK,EAAI,MAExD9C,EACG2C,WAAWA,GACXE,MAAM,WAAW,SAACE,GAAD,OAChBd,IAAUc,EAAE3C,QAAU6B,IAAUc,EAAE1C,OAAS,EAAI,MAGnD5B,EAAQwD,MAGVP,EAAKK,GAAG,YAAY,SAACiB,GACnB,IAAML,EAAarE,MAAgBsE,SAAS,KAE5ClB,EACGiB,WAAWA,GACXE,MAAM,iBAAkB,GACxBA,MAAM,UAAW,GAEpB7C,EAAK2C,WAAWA,GAAYE,MAAM,UAAW,MAG/C7B,EAAWe,GAAG,QAAQ,WACpB/B,EACGsB,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEd,OAAOkC,KAC3BhB,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEd,OAAOoC,KAC3BlB,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEb,OAAOiC,KAC3BhB,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEb,OAAOmC,KAE9Bd,EAAKJ,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEoB,KAAGhB,KAAK,MAAM,SAACJ,GAAD,OAAOA,EAAEsB,WAKlD,yBAAKS,UAAU,kBAAkBJ,MAAO,CAAEjC,MAAO,OAAQE,OAAQ,SAC/D,yBAAKoC,IAAKxE,EAAQmE,MAAO,CAAEjC,MAAO,OAAQE,OAAQ,cCrJzCqC,EAbS,SAAC,GAAc,IAAZzB,EAAW,EAAXA,KACzB,OACE,6BACE,oCACA,2BAAIA,EAAK3B,IAAM,KACf,qCACA,2BAAI2B,EAAKG,OAAS,KAClB,oCACA,2BAAIH,EAAKN,QAAU,OCMVgC,EAXH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACT3B,EADS,KACHjD,EADG,KAGhB,OACE,oCACE,kBAAC,EAAD,CAAWA,QAASA,IACpB,kBAAC,EAAD,CAAiBiD,KAAMA,M,OCJ7B4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ae4ea374.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as d3 from 'd3';\n\nconst categoricalColors = d3.scaleOrdinal(d3.schemeCategory10);\n\nconst colors = {\n  'Redes de Computadores': categoricalColors(1),\n  'Otimização': categoricalColors(2),\n  'Engenharia de Dados e Conhecimento': categoricalColors(3),\n  'Engenharia de Software': categoricalColors(4),\n  'Computação Gráfica': categoricalColors(5),\n  'Inteligência Artificial': categoricalColors(6),\n  'Algoritmos e Combinatória': categoricalColors(7),\n  'Arquitetura e Sistemas Operacionais': categoricalColors(8),\n  'Informática e Sociedade': categoricalColors(9),\n};\n\nexport default colors;\n","import React, { useRef, useEffect, memo } from 'react';\nimport * as d3 from 'd3';\n\nimport colaborationNetwork from '../data/collaboration-network.json';\nimport colors from '../data/colors';\n\nconst GraphView = ({ setNode }) => {\n  const svgref = useRef(null);\n\n  const bodyStrength = -110;\n  const linkStrength = 0.05;\n\n  var networkLinkStatus = {};\n\n  const networkNodes = colaborationNetwork.nodes;\n\n  const networkLinks = colaborationNetwork.publications.reduce(\n    (result, publication) => {\n      if (!publication.authors.length > 1) return result;\n\n      const linksIds = publication.authors.flatMap((authorA, idx) =>\n        publication.authors.slice(idx + 1).map((authorB) => {\n          let linkId = `${authorA}-${authorB}`;\n          networkLinkStatus[linkId] = 1;\n          return linkId;\n        })\n      );\n\n      linksIds.forEach((id) => {\n        const link = result.find((link) => link.id === id);\n        if (link) {\n          link.publications.push(publication.id);\n        } else {\n          const [source, target] = id.split('-');\n          result.push({ id, source, target, publications: [publication.id] });\n        }\n      });\n      return result;\n    },\n    []\n  );\n\n  const isConnected = (nodeA, nodeB) => {\n    return (\n      networkLinkStatus[`${nodeA.id}-${nodeB.id}`] ||\n      networkLinkStatus[`${nodeB.id}-${nodeA.id}`] ||\n      nodeA.id === nodeB.id\n    );\n  };\n\n  const drag = (simulation) => {\n    const dragstarted = (event, dNode) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      dNode.fx = dNode.x;\n      dNode.fy = dNode.y;\n    };\n\n    const dragged = (event, dNode) => {\n      dNode.fx = event.x;\n      dNode.fy = event.y;\n    };\n\n    const dragended = (event, dNode) => {\n      if (!event.active) simulation.alphaTarget(0);\n      dNode.fx = null;\n      dNode.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  useEffect(() => {\n    const svg = d3.select(svgref.current);\n\n    const width = svgref.current.clientWidth;\n    const height = svgref.current.clientHeight;\n\n    const simulation = d3\n      .forceSimulation(networkNodes)\n      .force(\n        'link',\n        d3\n          .forceLink(networkLinks)\n          .id((d) => d.id)\n          .strength(linkStrength)\n      )\n      .force('charge', d3.forceManyBody().strength(bodyStrength))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY());\n\n    networkLinks.forEach((link) => {\n      if (!link.source.degree) link.source.degree = 0;\n      if (!link.target.degree) link.target.degree = 0;\n\n      link.source.degree++;\n      link.target.degree++;\n    });\n\n    const link = svg\n      .append('g')\n      .attr('stroke', '#999')\n      .attr('stroke-opacity', 0.6)\n      .selectAll('line')\n      .data(networkLinks)\n      .join('line')\n      .attr('stroke-width', 1.5);\n\n    const node = svg\n      .append('g')\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 1.5)\n      .selectAll('circle')\n      .data(networkNodes)\n      .join('circle')\n      .attr('r', (d) => (d.degree ? 8 + Math.sqrt(d.degree) : 8))\n      .attr('fill', (d) => colors[d.field])\n      .call(drag(simulation));\n\n    node.on('mouseover', (_event, dNode) => {\n      const transition = d3.transition().duration(200);\n\n      node\n        .transition(transition)\n        .style('stroke-opacity', (o) => (isConnected(dNode, o) ? 1 : 0.3))\n        .style('opacity', (o) => (isConnected(dNode, o) ? 1 : 0.3));\n\n      link\n        .transition(transition)\n        .style('opacity', (l) =>\n          dNode === l.source || dNode === l.target ? 1 : 0.2\n        );\n\n      setNode(dNode);\n    });\n\n    node.on('mouseout', (_dNode) => {\n      const transition = d3.transition().duration(200);\n\n      node\n        .transition(transition)\n        .style('stroke-opacity', 1)\n        .style('opacity', 1);\n\n      link.transition(transition).style('opacity', 1);\n    });\n\n    simulation.on('tick', () => {\n      link\n        .attr('x1', (d) => d.source.x)\n        .attr('y1', (d) => d.source.y)\n        .attr('x2', (d) => d.target.x)\n        .attr('y2', (d) => d.target.y);\n\n      node.attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n    });\n  });\n\n  return (\n    <div className=\"graph-container\" style={{ width: '100%', height: '100%' }}>\n      <svg ref={svgref} style={{ width: '100%', height: '100%' }}></svg>\n    </div>\n  );\n};\n\nexport default memo(GraphView);\n","import React from 'react';\n\nconst NodeInformation = ({ node }) => {\n  return (\n    <div>\n      <h3>Nome</h3>\n      <p>{node.id || '-'}</p>\n      <h3>Campo</h3>\n      <p>{node.field || '-'}</p>\n      <h3>Grau</h3>\n      <p>{node.degree || '-'}</p>\n    </div>\n  );\n};\n\nexport default NodeInformation;\n","import React, { useState } from 'react';\n\nimport GraphView from './components/GraphView';\nimport NodeInformation from './components/NodeInformation';\n\nconst App = () => {\n  const [node, setNode] = useState({});\n\n  return (\n    <>\n      <GraphView setNode={setNode} />\n      <NodeInformation node={node} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport './global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}